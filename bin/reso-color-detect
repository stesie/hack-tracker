#! /usr/bin/php5
<?php

                     /*  L1  L2  L3    L4  L5   L6   L7     L8   */
$resoLevelToHue = array (44, 37, 24.8, 0,  329, 306, 284.8, 270.8);

function RGBtoHSV($R, $G, $B)    // RGB values:    0-255, 0-255, 0-255
{                                // HSV values:    0-360, 0-100, 0-100
	// Convert the RGB byte-values to percentages
	$R = ($R / 255);
	$G = ($G / 255);
	$B = ($B / 255);

	// Calculate a few basic values, the maximum value of R,G,B, the
	//   minimum value, and the difference of the two (chroma).
	$maxRGB = max($R, $G, $B);
	$minRGB = min($R, $G, $B);
	$chroma = $maxRGB - $minRGB;

	// Value (also called Brightness) is the easiest component to calculate,
	//   and is simply the highest value among the R,G,B components.
	// We multiply by 100 to turn the decimal into a readable percent value.
	$computedV = 100 * $maxRGB;

	// Special case if hueless (equal parts RGB make black, white, or grays)
	// Note that Hue is technically undefined when chroma is zero, as
	//   attempting to calculate it would cause division by zero (see
	//   below), so most applications simply substitute a Hue of zero.
	// Saturation will always be zero in this case, see below for details.
	if ($chroma == 0)
		return array('hue' => 0, 'saturation' => 0, 'value' => $computedV);

	// Saturation is also simple to compute, and is simply the chroma
	//   over the Value (or Brightness)
	// Again, multiplied by 100 to get a percentage.
	$computedS = 100 * ($chroma / $maxRGB);

	// Calculate Hue component
	// Hue is calculated on the "chromacity plane", which is represented
	//   as a 2D hexagon, divided into six 60 degree sectors. We calculate
	//   the bisecting angle as a value 0 <= x < 6, that represents which
	//   portion of which sector the line falls on.
	if ($R == $minRGB)
		$h = 3 - (($G - $B) / $chroma);
	elseif ($B == $minRGB)
		$h = 1 - (($R - $G) / $chroma);
	else
		$h = 5 - (($B - $R) / $chroma);

	// After we have the sector position, we multiply it by the size of
	//   each sector's arc (60 degrees) to obtain the angle in degrees.
	$computedH = 60 * $h;

	return array('hue' => $computedH, 'saturation' => $computedS, 'value' => $computedV);
}

function readPngToHueMap($file, &$hueMap) {
	$img = imagecreatefrompng($file);

	$imgWidth = imagesx($img);
	$imgHeight = imagesy($img);

	for($y = 0; $y < $imgHeight; $y ++) {
		for($x = 0; $x < $imgWidth; $x ++) {
			$rgb = imagecolorsforindex($img, imagecolorat($img, $x, $y));
			$hsv = RGBtoHSV($rgb['red'], $rgb['green'], $rgb['blue']);

			if($hsv['value'] < 27) {
				/* Ignore very dark pixels, probably background */
				continue;
			}

			if($hsv['hue'] > 195 && $hsv['hue'] < 210) {
				/* Ignore turquois lines */
				continue;
			}

			$i = (int)$hsv['hue'];

			if($i >= 345)
				$i -= 360;

			$hueMap[$i] ++;
		}
	}
}



$hueMap = array();
for($i = -15; $i < 345; $i ++)
	$hueMap[$i] = 0;

array_shift($argv);
foreach($argv as $file) {
	readPngToHueMap($file, $hueMap);
}

asort($hueMap);
#print_r($hueMap);

$mapSum = array_sum($hueMap);

if($mapSum == 0) {
	echo "0\t0\n";
	exit();
}

if($mapSum < 100) {
	echo "0\t-1\n";
	exit();
}

$levelLikeliness = array();
for($i = 0; $i < 8; $i ++) {
	$avgHue = $resoLevelToHue[$i];
	$likeliness = 0;

	for($j = -10; $j < 10; $j ++) {
		$likeliness +=  (10 - abs($j)) * $hueMap[$avgHue + $j];
	}

	$levelLikeliness[$i + 1] = $likeliness;
}

asort($levelLikeliness);
#print_r($levelLikeliness);

$guessedLevel = array_pop(array_keys($levelLikeliness));
echo "23\t$guessedLevel\n";
