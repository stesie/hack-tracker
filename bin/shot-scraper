#! /bin/bash
#
# Processor for a single local screenshot
#
# @author Stefan Siegl
#
# Copyright (c) 2013 Stefan Siegl <stesie@brokenpipe.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

if [ \! -e "$1" ]; then
	echo "shot-scraper: File does not exist: $1" 1>&2
	exit 2
fi

filename="$1"; shift;

debug() {
	return
	message="$1"; shift;
	echo "$filename: $message" 1>&2
}

log() {
	message="$1"; shift;
	echo "$filename: $message" 1>&2
}

error() {
	message="$1"; shift;
	echo "$filename: $message" 1>&2

	if [ "$tempFile" != "" ]; then
		rm -f "$tempFile" "$tempFile.txt"
	fi

	exit 2
}

set -- `identify -format "%w %h" "$filename"`
imgWidth="$1"; shift;
imgHeight="$1"; shift;
debug "detected image size: $imgWidth x $imgHeight pixels"

if [ "$HTCONF_FILE" = "" ]; then
	HTCONF_FILE=${0%/*}/../etc/"$imgWidth"x"$imgHeight".conf
fi

if [ \! -e "$HTCONF_FILE" ]; then
	error "no htconf file available"
fi

debug "using conf file $HTCONF_FILE"
source "$HTCONF_FILE"

tempFile="`mktemp`.png"
debug "using temporary file $tempFile"

convertOpts="-quality 100%"


#
# handle "portal info" page
# we handle it first, since "items acquired" requires some scanning, making it more expensive
#
convert "$filename" -crop "$energyWidth"x"$energyHeight"+$energyLeft+$energyTop "$tempFile"
#eog "$tempFile"
tesseract "$tempFile" "$tempFile" -psm 7 > /dev/null
counter=0

getReso() {
	offsetX=$1; shift;
	offsetY=$1; shift;

	convert "$filename" -crop "$resoListWidth"x"$resoListHeight"+$offsetX+$offsetY $convertOpts "$tempFile"

	set -- `${0%/*}/reso-color-detect "$tempFile"`
	level=$2
	#cp "$tempFile" /home/stesie/Projekte/hack-tracker/tessdata/training.lvl/$tempFile-$counter-L$level; counter=$[$counter + 1]

	[ "$level" -lt 0 ] && {
		#cp "$tempFile" /home/stesie/Projekte/hack-tracker/tessdata/training.lvl/$tempFile-$counter; counter=$[$counter + 1]
		error "resonator level not readable"
	}

	resoList="$level $resoList"
	resoTotal=$[$resoTotal + $level]
}

if grep -qe "Energy" "$tempFile.txt"; then
	debug "detected 'portal info' page"
	resoList=""
	resoTotal=0

	for offset in 0 1 2 3; do
		getReso $[$resoListLeft + $resoListOffset * $offset] $resoListTop
		getReso $[$resoListLeft + $resoListOffset * $offset] $resoListTop2
	done

	convert "$filename" -crop "$portalLevelWidth"x"$portalLevelHeight"+$portalLevelLeft+$portalLevelTop $convertOpts "$tempFile"

	set -- `${0%/*}/reso-color-detect "$tempFile"`
	level=$2

	[ "$level" -lt 1 ] && {
		#eog "$tempFile"
		error "portal level not readable"
	}

	if [ $resoTotal -eq 0 ]; then
		expectPortalLevel=1
	else
		expectPortalLevel=$[$resoTotal / 8]
	fi

	if [ $expectPortalLevel -lt 1 ]; then
		expectPortalLevel=1
	fi

	#echo $resoTotal
	#echo $expectPortalLevel
	#echo $level

	if [ $level -ne $expectPortalLevel ]; then
		error "calculated portal level mismatches actual portal level: $resoList (read portal level: $level) | calculated: $expectPortalLevel"
	fi

	set -- $resoList
	echo -n "[ $1"; shift

	for level in $*; do
		echo -n ", $1"; shift
	done
	echo "]"

	rm -f "$tempFile" "$tempFile.txt"
	exit 0
fi



#
# handle "items acquired" page
#
convertOpts="-quality 100%"

# Remove red stuff from the right half of the screen (i.e. stuff like -3%)
convertOpts="$convertOpts ( +clone -crop "$[$imgWidth / 2]"x$imgHeight+"$[$imgWidth / 2]"+0  -fill black -fuzz 45% -opaque red ) -layers flatten"

# Remove dark background stuff
convertOpts="$convertOpts -contrast"
convertOpts="$convertOpts -fill black -fuzz 45% -opaque black"
convertOpts="$convertOpts -contrast"

convertOpts="$convertOpts -fill black -fuzz 5% -opaque rgb(0,239,255) "
convertOpts="$convertOpts -fill black -fuzz 5% -opaque rgb(9,180,197) "
convertOpts="$convertOpts -fill black -fuzz 5% -opaque rgb(9,218,231) "
convertOpts="$convertOpts -fill black -fuzz 5% -opaque rgb(9,150,161) "

scrapeResults() {
	first=1
	echo -n "{ \"type\": \"$1\", \"items\": ["

	while [ $[$resultsListTop + $resultsHeadTopOffset + $resultsHeadHeight] -lt $resultsListBottom ]; do
		resultsListTop=$[$resultsListTop + $resultsHeadTopOffset]
		resultsListHeight=$[$resultsListBottom - $resultsListTop]

		convert "$filename" $convertOpts -crop "$resultsWidth"x"$resultsHeadHeight"+$resultsLeft+$resultsListTop "$tempFile"
		tesseract "$tempFile" "$tempFile" -l res ingress-items > /dev/null
		sed -i -e 's/°\/0/%/'  -e 's/°\/c/%/'  -e 's/-[0-9]%//'  -e "s/\(L[1-8]\)\(Xmp\)/\1 \2/"  -e 's/Resonator(/Resonator (/' "$tempFile.txt"
		read a b c d < "$tempFile.txt"
		#cat "$tempFile.txt"; eog "$tempFile"

		if [ "$a" = "" ]; then
			break
		fi

		if [ "$a" = "LI" -o "$a" = "Ll" ]; then
			a="L1"
		fi

		if grep -qe "OPEN" -e "Comiccon" -e "Conspiracy" -e "Report" -- "$tempFile.txt"; then
			object="Media"
			level=0
			quantity=1
		else
			object=$b

			test "$b" = "Key" && a=Portal
			test "$b" = "Shield" && a=Portal
			test "$a" = "U" && a=L1

			case $a in
			L1 | L2 | L3 | L4 | L5 | L6 | L7 | L8)
				if [ "$b" = "Resonator" ]; then
					quantity=$c
				elif [ "$b" = "Xmp" ]; then
					quantity=$d
				elif [ "$b" = "Power" ]; then
					quantity=$d
					object="Cube"
				else
					#cp "$tempFile" /home/stesie/Projekte/hack-tracker/tessdata/training.lvl/$tempFile-$counter; counter=$[$counter + 1]
					error "parse error, unknown b=$b"
				fi

				level=${a#L}
				;;

			Portal)
				quantity=$c
				level=0
				;;

			*)
				#cp "$tempFile" /home/stesie/Projekte/hack-tracker/tessdata/training.lvl/$tempFile-$counter; counter=$[$counter + 1]
				error "parse error, unknown a=$a b=$b"
				;;
			esac

			if [ "$quantity" = "" ]; then
				quantity=1
			else
				quantity="`perl -e '$_ = shift @ARGV;
					if(m/\((\d)\)/) { print $1 } else { print 0 }' -- "$quantity"`"
				if [ $quantity -eq 0 ]; then
					error "failed to parse quantity=$quantity"
				fi
			fi
		fi

		if [ $first -ne 1 ]; then
			echo -n ", "
		else
			first=0
		fi

		echo -n "{ \"object\": \"$object\", \"level\": ${level#L}, \"quantity\": $quantity }"
	done

	echo "]}";

	rm -f "$tempFile" "$tempFile.txt"
	exit 0
}

for offset in `seq 0 9`; do
	resultsListTop=$[$resultsHeadTop - $resultsHeadTopOffset * $offset / 2]
	convert "$filename" $convertOpts -crop "$resultsWidth"x"$resultsHeadHeight"+$resultsLeft+$resultsListTop "$tempFile"
	tesseract "$tempFile" "$tempFile" -l res > /dev/null
	#cat "$tempFile.txt"; eog "$tempFile"

	if grep -qe "Items acquired" "$tempFile.txt"; then
		debug "detected 'items acquired' page at offset $offset"
		scrapeResults "friendly"
	elif grep -qe "Hack successful" "$tempFile.txt"; then
		debug "detected 'hack successful' page at offset $offset"
		scrapeResults "enemy"
	elif grep -qe "Hack acqu" "$tempFile.txt"; then		# only short phrase, since red -x% likely at the right hand side
		debug "hack failed"
		echo -n "{ \"type\": \"enemy\", \"items\": [] }"
		rm -f "$tempFile" "$tempFile.txt"
		exit 0
	elif grep -qe "Portal running hot" "$tempFile.txt"; then
		debug "Portal running hot"
		rm -f "$tempFile" "$tempFile.txt"
		exit 0
	fi
done


rm -f "$tempFile" "$tempFile.txt"
error "unsupported page type"
ln $filename unsupported/
